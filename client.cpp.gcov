        -:    0:Source:client.cpp
        -:    0:Graph:./client.gcno
        -:    0:Data:./client.gcda
        -:    0:Runs:4
        -:    1:// client.cpp
        -:    2:#include <iostream>
        -:    3:#include <string>
        -:    4:#include <sys/socket.h>
        -:    5:#include <arpa/inet.h>
        -:    6:#include <unistd.h>
        -:    7:#include <cstring>
        -:    8:
        4:    9:int main()
        -:   10:{
        4:   11:    int sock = 0;
        -:   12:    struct sockaddr_in serv_addr;
        -:   13:    char buffer[4096];
        -:   14:
        4:   15:    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
        -:   16:    {
    #####:   17:        std::cout << "\n Socket creation error \n";
    #####:   18:        return -1;
        -:   19:    }
        -:   20:
        4:   21:    serv_addr.sin_family = AF_INET;
        4:   22:    serv_addr.sin_port = htons(9034);
        -:   23:
        4:   24:    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0)
        -:   25:    {
    #####:   26:        std::cout << "\nInvalid address/ Address not supported \n";
    #####:   27:        return -1;
        -:   28:    }
        -:   29:
        4:   30:    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        -:   31:    {
    #####:   32:        std::cout << "\nConnection Failed \n";
    #####:   33:        return -1;
        -:   34:    }
        -:   35:
        -:   36:    while (true)
        -:   37:    {
        -:   38:        // Clear buffer for next message
       93:   39:        std::memset(buffer, 0, sizeof(buffer));
        -:   40:        
        -:   41:        // Receive message from server
       93:   42:        ssize_t valread = recv(sock, buffer, sizeof(buffer) - 1, 0);
       93:   43:        if (valread <= 0)
        -:   44:        {
        1:   45:            std::cout << "Server closed the connection or error occurred.\n";
        1:   46:            break;
        -:   47:        }
       92:   48:        buffer[valread] = '\0';
       92:   49:        std::string serverMessage = buffer;
        -:   50:        // Display server message
       92:   51:        std::cout << serverMessage;
        -:   52:
        -:   53:
       92:   54:        if (serverMessage.find("Exiting") != std::string::npos)
        -:   55:        {
        3:   56:            break;
        -:   57:        }
        -:   58:        
        -:   59:        // Get user input
       89:   60:        std::string userInput;
       89:   61:        std::getline(std::cin, userInput);
        -:   62:        // Send user input to server
       89:   63:        userInput += "\n"; // Add newline character
       89:   64:        send(sock, userInput.c_str(), userInput.size(), 0);
      181:   65:    }
        -:   66:
        4:   67:    close(sock);
        4:   68:    return 0;
        -:   69:}
